# Librerias necesarias para recibir audio por udp
import socket
import pyaudio
#Libreria threading para usar hilos
from threading import Thread

# Variables del audio
CHUNK = 1024
FORMAT = pyaudio.paInt16
CHANNELS = 2
RATE = 44100
PORT = 50000

def transmitter(HOST):
	# Conectamos al que nos envia los datos
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.connect((HOST, PORT))

	# Crear variable de pyaudio
	p = pyaudio.PyAudio()
	# Creamos otra variable para trabajar con pyaudio
	stream = p.open(format=FORMAT,
			    channels=CHANNELS,
			    rate=RATE,
			    input=True,
			    frames_per_buffer=CHUNK)
	# Iniciamos el audio
	stream.start_stream()

	print("*_>recording")
	# Se va leyendo el audio miemtras se recibe
	while True:
		try:
		    data = stream.read(CHUNK)
		except Exception as e:
		    data = '\x00' * CHUNK
		s.sendall(data)

	print("*_>done recording")

	# Cerramos el audio terminamos con la libreria pyaudio
	# Y cerramos el trabajo con el puerto
	stream.stop_stream()
	stream.close()
	p.terminate()
	s.close()

def receiver():
	# Recibimos audio usando udp
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

	# Socket escucha por el puerto indicado
	s.bind(("0.0.0.0", PORT))
	s.listen(1)
	# Si se crea la conexion hace esta parte
	conn, addr = s.accept()
	print ('Connected by', addr)

	# Creamos una variable para pyaudio y despues
	# Creamos otra necesaria para el envio de audio
	p = pyaudio.PyAudio()
	stream = p.open(format=p.get_format_from_width(2),
		            channels=CHANNELS,
		            rate=RATE,
		            output=True,
		            frames_per_buffer=CHUNK)

	frames = []
	# Iniciamos el envio de audio
	stream.start_stream()

	# Igualamos los datos a lo que recibimos de la conexion
	data = conn.recv(CHUNK)
	# Si los datos no son nulos escribimos esos datos, es decir, el audio

	while data != '':
	    stream.write(data)
	    data = conn.recv(CHUNK)
	    frames.append(data)

	# Si no hay datos paramos el audio, cerramos la conexion y terminamos de usar
	# pyaudio
	stream.stop_stream()
	stream.close()
	p.terminate()
	conn.close()

# Creamos dos threads para recibir y transmitir simultáneamente
def main():
	HOST = input("Introduce una dirección IP\n")
	
	Tr = Thread(target=receiver)
	Tr.daemon = True
	Tr.start()

	Tt = Thread(target=transmitter, args=(HOST,))
	Tt.daemon = True
	Tt.start()
	Tt.join()
	
if __name__ == '__main__':
    main()
